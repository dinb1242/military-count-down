// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthToken {
  id           Int      @id @default(autoincrement())
  accessToken  String   @unique
  refreshToken String   @unique
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  aTExpiredAt  DateTime
  rTExpiredAt  DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AccessHistory {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  device    String
  ip        String
  createdAt DateTime @default(now())
}

model User {
  id            Int                    @id @default(autoincrement())
  email         String                 @unique
  password      String
  name          String
  phone         String                 @unique
  isAdmin       Boolean                @default(false)
  authToken     AuthToken[]
  accessHistory AccessHistory[]
  wikiRevision  WikiRevision[]
  retrospect    Retrospect[]
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  status        Int                    @default(1)
}

model Coworker {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  devPart      DevPart
  projects     String[]
  wiki         Wiki          @relation(fields: [wikiId], references: [id])
  wikiId       Int           @unique
  file         File?         @relation(fields: [fileId], references: [id])
  fileId       Int?          @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Project {
  id          Int          @id @default(autoincrement())
  title       String
  content     String?
  wiki        Wiki         @relation(fields: [wikiId], references: [id])
  wikiId      Int          @unique
  file        File?        @relation(fields: [fileId], references: [id])
  fileId      Int?         @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Wiki {
  id           Int            @id @default(autoincrement())
  wikiType     WikiType
  wikiContent  String?
  wikiRevision WikiRevision[]
  coworker     Coworker?
  project      Project?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model WikiRevision {
  id          Int      @id @default(autoincrement())
  wikiContent String
  wiki        Wiki     @relation(fields: [wikiId], references: [id], onDelete: Cascade)
  wikiId      Int
  author      User     @relation(fields: [authorId], references: [id])
  authorId    Int
  createdAt   DateTime @default(now())
}

model Retrospect {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id        Int       @id @default(autoincrement())
  filename  String
  filePath  String
  fileKey String
  fileSize  Int
  mimeType  String
  coworker  Coworker?
  project   Project?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Example {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean? @default(false)
  // author User? @relation(fields: [authorId], references: [id])
  authorId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DevPart {
  FULL_STACK
  BACKEND
  FRONTEND
}

enum WikiType {
  COWORKER
  PROJECT
  ACCIDENT
  RETROSPECT
}
